name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          awk "/## \[${VERSION}\]/{flag=1;next}/## \[/{flag=0}flag" CHANGELOG.md > release_notes.md
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        component:
          - name: ingestor
            context: ./src/ingestor
            dockerfile: ./src/ingestor/Dockerfile
          - name: dashboard
            context: ./app
            dockerfile: ./app/Dockerfile
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push ${{ matrix.component.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.dockerfile }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/bangkok-aqi-${{ matrix.component.name }}:latest
            ghcr.io/${{ github.repository_owner }}/bangkok-aqi-${{ matrix.component.name }}:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image digest
        run: echo "Image pushed with digest ${{ steps.docker_build.outputs.digest }}"
  
  publish-terraform-modules:
    name: Publish Terraform Modules
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Package Terraform modules
        run: |
          cd infra/terraform
          tar -czf terraform-modules-${{ steps.version.outputs.VERSION }}.tar.gz modules/
      
      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: infra/terraform/terraform-modules-${{ steps.version.outputs.VERSION }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  generate-docs:
    name: Generate and Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install mkdocs mkdocs-material
      
      - name: Generate documentation
        run: |
          # Create mkdocs.yml if it doesn't exist
          cat > mkdocs.yml <<EOF
          site_name: Bangkok AQI Pipeline
          theme:
            name: material
            palette:
              primary: blue
              accent: light-blue
          nav:
            - Home: README.md
            - Architecture: docs/architecture.md
            - Deployment: DEPLOYMENT.md
            - Contributing: CONTRIBUTING.md
            - Security: SECURITY.md
            - Changelog: CHANGELOG.md
          EOF
          
          mkdocs build
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
  
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: 
      - create-release
      - build-and-push-images
      - publish-terraform-modules
    
    steps:
      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Send Slack notification
        if: success()
        run: |
          echo "Release v${{ steps.version.outputs.VERSION }} completed successfully"
          # Add actual Slack webhook call here if needed
          # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          #   -H 'Content-Type: application/json' \
          #   -d '{"text":"âœ… Bangkok AQI Pipeline v${{ steps.version.outputs.VERSION }} released!"}'
      
      - name: Create summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<EOF
          ## Release v${{ steps.version.outputs.VERSION }} Complete! ðŸŽ‰
          
          ### Artifacts Published:
          - âœ… GitHub Release created
          - âœ… Docker images pushed to GHCR
          - âœ… Terraform modules packaged
          - âœ… Documentation deployed
          
          ### Docker Images:
          \`\`\`
          ghcr.io/${{ github.repository_owner }}/bangkok-aqi-ingestor:${{ steps.version.outputs.VERSION }}
          ghcr.io/${{ github.repository_owner }}/bangkok-aqi-dashboard:${{ steps.version.outputs.VERSION }}
          \`\`\`
          
          ### Next Steps:
          1. Update deployment configurations with new version
          2. Run deployment pipeline
          3. Verify services are healthy
          4. Update documentation if needed
          EOF
